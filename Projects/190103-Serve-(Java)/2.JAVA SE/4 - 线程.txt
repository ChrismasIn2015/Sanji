线程状态：新建/就绪/运行/阻塞/结束

单线程
	1.设计任务类implements java.lang.<接口>Runnable
		虚拟机调用：run()：线程就绪
	2.装载任务类new Thread(task)
		线程运行：start()：
		线程阻塞：join()：必须等待该线程执行完毕
		线程阻塞：sleep(long)：线程休眠，抛出InterruptException
		线程阻塞：yield()：让出资源，超时后继续竞争
		判断运行：isAlive():boolean
		设置优先级：setPriority(int):1-10
		中断：interrupt()
多线程
	java.util.concurrent.
	●<接口>Executor
		1.execute(Runnable):执行可运行任务
	●<接口:继承Executor>ExecutorService
		1.shutdown():等待任务执行完毕
		2.shutdownNow():List<Runnable>:直接关闭,返回未完成任务列表
		3.isTerminated()：boolean：是否所有任务终止
	●Executors
		1.newFixedThreadPool(int:最大并发执行任务数):ExecutorService
		2.newCachedThreadPool():ExecutorService：大小不固定
		
	1.创建线程池:ExecutorService executor = Executors.newFixedThreadPool(int:最大并发执行任务数)
	2.灵活添加+并发执行所有任务：executor.execute(task);
	3.结束:executor.shutdown();
--------------------------------------------------------------------------------------------------
避免程序竞争状态：线程同步(加锁)
1●加锁
	●1.方法加锁：
		public synchronized void name(){};
		实例方法:加锁方法
		静态方法:加锁类
	  方法内添加同步块
		public void name(){ synchronized(this){statements;}}
	●2.方法加锁:
	<接口>java.util.concurrent.locks●Lock
		1.lock();
		2.unlock();
		3.newCondition():Condition
	java.util.concurrent.locks●ReentrantLock
		1.ReentrantLock():等价于false
		2.ReentrantLock(fair:boolean):公正锁1:最长等待时间的线程进入:0:没有特定访问次序
	步骤：新建ReentrantLock锁对象
		方法内
		try{ lock(); }
		finally{ unlock();}
2●使用阻塞队列<合集框架>：
	临界区使用阻塞队列存放共享数据，
	空队列删除/满队列添加操作会导致线程阻塞
	Array-Linked-Priority-BlockingQueue<E>
		take()：队首
		put(e)：队尾
3●使用信号量:限制访问共享资源的线程数：与方法加锁类似
	<接口>java.util.Semaphore
		1.Semaphore(int): 在公共资源内指定可使用信号量
		2.Semaphore(int,boolean：是否公平)
		3.acquire():在方法内获得一个许可/阻塞
		4.release():返给信号量
--------------------------------------------------------------------------------------------------
线程协作：lock.newCondition()
	<接口>java.util.concurrent●Condition:在临界区内增加条件
		1.await():void：当临界区有某种限制时候，线程暂停,进入等待状态
		2.signal():void：另外的线程解除限制后，唤醒一个暂停线程
		3.signalALL():Condition:唤醒所有暂停线程
	在同步方法内编辑协作方式；
--------------------------------------------------------------------------------------------------
使用Fork/Join框架实现并行编程：归并排序
	任务定义：java.util.comcurrent
		接口：Future<V>
		ForkJoinTask<V>
			fork()
			join()
		RecursiveAction<V>
			compute()：V：通过重载定义实现方式
	任务池定义：java.util.comcurrent
		接口：ExecutorService
		ForkJoinPool
			ForkJoinPool(task)：构造
			invoke(task)：执行任务
			invokeAll(task...)：并发执行所有任务