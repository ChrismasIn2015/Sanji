java.lang.Class对象
Class类的每个实例则代表运行中的一个类， 一般某个类的Class对象被载入内存，它就用来创建这个类的所有对象：
 	- .getClass()方式生成Class对象：		非常全面的新对象(Object)
	【静态块】	1
	【非静态的代码块】	2
	【构造函数】	3
 	- .class(也称类字面常量)  方式生成Class对象：	基本为空的新对象
	【静态块】	X
	【非静态的代码块】	X
	【构造函数】	X
 	Class.forName("全路径名")：	  		只有静态块的新对象
	【静态块】	√
	【非静态的代码块】	X
	【构造函数】	X

》》常用方法

getName()，一个Class对象描述了一个特定类的特定属性，而这个方法就是返回String形式的该类的简要描述。
newInstance()，可以根据某个Class对象产生其对应类的实例。需要强调的是，它调用的是此类的默认构造方法。
例如：
	MyObject x = new MyObject();
	MyObject y = x.getClass().newInstance();
getClassLoader()，返回该Class对象对应的类的类加载器。
getSuperClass()，返回某子类所对应的直接父类所对应的Class对象
isArray()，判定此Class对象所对应的是否是一个数组对象


》》基本方法

getClassLoader()  		获取该类的类装载器。 
getComponentType() 	如果当前类表示一个数组，则返回表示该数组组件的 Class 对象，否则返回 null。 
getConstructor(Class[]) 	返回当前 Class 对象表示的类的指定的公有构造子对象。 
getConstructors() 		返回当前 Class 对象表示的类的所有公有构造子对象数组。 
getDeclaredConstructor(Class[]) 	返回当前 Class 对象表示的类的指定已说明的一个构造子对象。 
getDeclaredConstructors() 	返回当前 Class 对象表示的类的所有已说明的构造子对象数组。 
getDeclaredField(String) 	返回当前 Class 对象表示的类或接口的指定已说明的一个域对象。 
getDeclaredFields() 	返回当前 Class 对象表示的类或接口的所有已说明的域对象数组。 
getDeclaredMethod(String, Class[]) 	返回当前 Class 对象表示的类或接口的指定已说明的一个方法对象。 
getDeclaredMethods() 	返回 Class 对象表示的类或接口的所有已说明的方法数组。 
getField(String) 		返回当前 Class 对象表示的类或接口的指定的公有成员域对象。 
getFields() 		返回当前 Class 对象表示的类或接口的所有可访问的公有域对象数组。 
getInterfaces() 		返回当前对象表示的类或接口实现的接口。 
getMethod(String, Class[]) 	返回当前 Class 对象表示的类或接口的指定的公有成员方法对象。 
getMethods() 		返回当前 Class 对象表示的类或接口的所有公有成员方法对象数组，包括已声明的和从父类继承的方法。 
getModifiers() 		返回该类或接口的 Java 语言修改器代码。 
getName() 		返回 Class 对象表示的类型(类、接口、数组或基类型)的完整路径名字符串。 
getResource(String) 	按指定名查找资源。 
getResourceAsStream(String) 	用给定名查找资源。 
getSigners() 		获取类标记。 
getSuperclass() 		如果此对象表示除 Object 外的任一类, 那么返回此对象的父类对象。 
isArray() 			如果 Class 对象表示一个数组则返回 true, 否则返回 false。 
isAssignableFrom(Class) 	判定 Class 对象表示的类或接口是否同参数指定的 Class 表示的类或接口相同，或是其父类。 
isInstance(Object) 		此方法是 Java 语言 instanceof 操作的动态等价方法。 
isInterface() 		判定指定的 Class 对象是否表示一个接口类型。 
isPrimitive() 		判定指定的 Class 对象是否表示一个 Java 的基类型。 
newInstance() 		创建类的新实例。 
toString() 		将对象转换为字符串。
